# EDITAREA INTERACTIVA A DATELOR DE INTRARE SI SUBSTITUTII IN ISTORIC.
# Copyright (C) 2001-2025, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Octavian Mustafa <octawian@yahoo.com>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-17 17:56+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ro\n"
"Language-Team: ro <octawian@yahoo.com>\n"
"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : (n==0 || (n%100 > 0 && n%100"
" < 20)) ? 1 : 2);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr ""
"Editarea interactivă a datelor de intrare și substituții în istoric"

#: ../../tutorial/interactive.rst:7
msgid ""
"Some versions of the Python interpreter support editing of the current "
"input line and history substitution, similar to facilities found in the "
"Korn shell and the GNU Bash shell.  This is implemented using the `GNU "
"Readline`_ library, which supports various styles of editing.  This "
"library has its own documentation which we won't duplicate here."
msgstr ""
"Anumite versiuni ale interpretorului de Python ne permit *editarea* "
"comenzilor introduse (în linia de comandă), respectiv *reluarea* "
"execuției unora din itemii listei de comenzi a *istoricului* (sesiunii "
"de lucru și nu numai; calitate denumită, generic, *substituții în "
"istoric*, de la englezescul *history substitution*), aidoma celor puse "
"la dispoziția utilizatorului de către facilitățile disponibile în "
"interpretoarele de comenzi Korn și GNU Bash. Mecanismele software sunt "
"implementate pe baza bibliotecii `GNU Readline`_, în care utilizatorul "
"își poate alege stilul de editare (din setul celor acceptate). Această "
"bibliotecă are documentație proprie (bogată), pe care nu o vom reproduce "
"aici."

#: ../../tutorial/interactive.rst:17
msgid "Tab Completion and History Editing"
msgstr "Completări din tabulator și editarea istoricului"

#: ../../tutorial/interactive.rst:19
msgid ""
"Completion of variable and module names is :ref:`automatically enabled "
"<rlcompleter-config>` at interpreter startup so that the :kbd:`Tab` key "
"invokes the completion function; it looks at Python statement names, the "
"current local variables, and the available module names.  For dotted "
"expressions such as ``string.a``, it will evaluate the expression up to "
"the final ``'.'`` and then suggest completions from the attributes of the"
" resulting object.  Note that this may execute application-defined code "
"if an object with a :meth:`~object.__getattr__` method is part of the "
"expression.  The default configuration also saves your history into a "
"file named :file:`.python_history` in your user directory. The history "
"will be available again during the next interactive interpreter session."
msgstr ""
"*Completarea* numelor de variabile și de module este :ref:`activată "
"automat <rlcompleter-config>` la pornirea interpretorului (de Python), "
"așa că, prin apăsarea tastei :kbd:`Tab` (tabulatorul), va fi invocată "
"funcția de completare; ea va căuta în lista numelor de instrucțiuni Python, "
"în cea a numelor de variabile locale *în viață*, respectiv în cea a numelor "
"de module accesibile. În cazul unor expresii *cu punct* precum ``șir.exe``, "
"expresia va fi evaluată până la acel ``'.'`` de final, după care îi vor fi "
"propuse utilizatorului completări folosind atributele obiectului construit "
"ca rezultat al căutărilor. Țineți seama de faptul că, dacă numele unui "
"obiect care a implementat metoda :meth:`~object.__getattr__` este parte din "
"expresia căutată, atunci se poate întâmpla să fie executat și cod din "
"aplicația la care lucrați. Configurația prestabilită (a unei instalări "
"tipice a sistemului Python) face ca istoricul activităților dumneavoastră în "
"linia de comandă să fie salvat într-un fișier intitulat "
":file:`.python_history`, fișier situat în directorul dumneavoastră de "
"utilizator. Astfel, acest istoric vă va fi disponibil la următoarea sesiune "
"de lucru interactiv cu interpretorul (de Python)."

#: ../../tutorial/interactive.rst:36
msgid "Alternatives to the Interactive Interpreter"
msgstr "Alternative la interpretorul interactiv"

#: ../../tutorial/interactive.rst:38
msgid ""
"This facility is an enormous step forward compared to earlier versions of"
" the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows"
" if an :data:`~token.INDENT` token is required next).  The completion "
"mechanism might use the interpreter's symbol table.  A command to check "
"(or even suggest) matching parentheses, quotes, etc., would also be "
"useful."
msgstr ""
"Această caracteristică (de a fi *interactiv* a interpretorului) constituie "
"un uriaș pas înainte față de versiunile anterioare ale interpretorului (de "
"Python); cu toate acestea, mai avem dorințe de îndeplinit: ar fi foarte "
"bine dacă ni s-ar putea indica indentări potrivite atunci când trebuie să "
"continuăm o linie de cod pe rândul următor (dat fiind că parserul știe "
"când un *simbol* (de la englezescul, ca jargon informatic, *token*) "
":data:`~token.INDENT` este cerut pentru a continua). Mecanismul de "
"completare (a numelor, șamd.) ar putea întrebuința (într-un atare scop) "
"tabela de simboluri a interpretorului. O comandă pentru verificarea (ori "
"măcar sugerarea) închiderii unei paranteze deschise, a unor ghilimele "
"șamd., ar fi, cu siguranță, de folos."

#: ../../tutorial/interactive.rst:45
msgid ""
"One alternative enhanced interactive interpreter that has been around for"
" quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar "
"enhanced interactive environment is bpython_."
msgstr ""
"O alternativă (la interpretorul de Python actual) este cea oferită de "
"un interpretor interactiv avansat, disponibil de destul de mult timp, "
"care se numește IPython_, interpretor capabil de completări din tabulator, "
"de explorare a obiectelor și de o administrare sofisticată a istoricului. "
"În plus, el poate fi personalizat în privința punctelor-cheie, respectiv "
"scufundat în codul altor aplicații. Asemănător lui este și mediul "
"interactiv extins intitulat bpython_."

